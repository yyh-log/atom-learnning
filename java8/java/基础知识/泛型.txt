泛型类
public class Pair<T>{ //T放在类名的后边
  private T first;
}

泛型方法
class ArrayAlg{

 public static<T> T getMiddle(T...a){//修饰符的后边，返回值的前边
   
 }
}
调用泛型方法
ArrayAlg.<String>.getMiddle("A","B","C");

限定泛型范围
classArrayAlg{
  public static<T extends Comparable> T min(T[] a){//这样T的变量就可以使用compareTo的方法
      
  }
}

通配符类型
Pair<? extends Employee> 
Pair<? super Employee>



无限定通配符
Pair<?>


//类型擦除 默认使用Object替换T
//不能创建参数化类型的数组例如Pair<String>[] table = new Pair<String>[10];

什么是泛型擦除？
https://www.cnblogs.com/wuqinglong/p/9456193.html
Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉保留的原始类型
原始类型 就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其限定类型（无限定的变量用Object）替换。
如在代码中定义List<Object>和List<String>等类型，在编译后都会变成List



        Class<String> stringClass = String.class;
        Class<?> aClass = Class.forName("");
        String abc = new String("ss");
        Class<? extends String> aClass1 = abc.getClass();
