可靠性传输：
滑动窗口
快速重传：发送方如果收到连续3个冗余ACK，那么发送方就会执行快重传
累积确认:(1)确认N号报文表示N号报文之前的报文都已经确认了


流量控制：
滑动窗口
接收方不断调整自己的接收窗口实现流量控制,实现对发送方的流量控制

TCP规定，即使设置窗口为零，也必须接收以下报文段：零窗口探测报文段、确认报文段和携带紧急数据的报文段


拥塞控制：拥塞控制就是防止过多的数据注入网络中，这样可以使网络中的路由器或链路不致于过载
慢开始（slow-start）：先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值，每过一个轮次，窗口大小翻倍，呈指数爆炸增长
拥塞避免（congestion-avoidance）当窗口大于门限值，拥塞窗口cwnd按线性规律增长,使网络比较不容易出现拥塞
快重传（fast retransmit）发送方如果收到连续3个冗余ACK，那么发送方就会执行快重传算法
快恢复（fast recovery）调整门限值 ssthresh为当前拥塞窗口的一半，同时设置拥塞窗口 cwnd为新的门限值（发生报文段丢失时拥塞窗口的一半），而不是从1开始

当cwnd < ssthresh时，使用上述慢开始算法,指数增长。
当cwnd > ssthresh时，停止使用慢开始算法而改用拥塞避免算法。


HTTP1.0和HTPP1.1的区别 

三次握手协议
第一次 SYN=1,seq=x，客户端进入同步发送状态
第二次,SYN=1,ACK=1,seq=x，ack=x+1,服务端进入同步接收状态
第三次，ACK=1,seq=x+1,ack=y+1 客户端进入连接状态，服务端进入连接状态


初始化序列号原因
防止由于网络路由TCP报文段可能存在延迟抵达与排序混乱的问题

为什么连接建立需要三次握手，而不是两次握手？
同步服务端seq序号
让服务端知道客户端的接收能力

SYN 洪泛攻击

四次挥手
第一次挥手 FIN=1,seq=u 客户端进入等待终止状态

第二次挥手 ACK=1,seq=w,ack=u+1 服务端进入关闭等待（CLOSE-WAIT）状态，TCP连接处于半关闭状态,如果服务器端要发送数据，客户端仍要接收

第三次挥手 FIN=1,ACK=1,seq=v,ack=u+1 服务器进入最后确认（LAST-ACK）状态

第四次挥手 ACK=1,seq=u+1,ack=w+1,等待2MSL 在经过时间等待计时器设置的时间2MSL后，客户端才进入关闭（CLOSE）状态,务器收到客户端发出的确认报文就进入关闭（CLOSE）状态

等待2MSL原因？
ACK报文段可能丢失，服务器就不能正常进入CLOSE状态

